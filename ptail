#!/usr/bin/python
# license: GPLv2
import sys
import urllib
import urllib2
import time


def die(Msg):
    sys.stderr.write("Error: " + Msg + "\n")
    sys.exit(1)

def warn(Msg):
    sys.stderr.write("Warn: " + Msg + "\n")


if len(sys.argv) < 2:
    die("ptail <url to get>")

url = sys.argv[1]
user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'
headers = { 'User-Agent' : user_agent }
pointer = 0

def get_file_size(url):
    req = urllib2.Request(url, headers=headers)
    req.get_method = lambda : 'HEAD'
    res = urllib2.urlopen(req)
    if res.headers.has_key('Accept-Ranges') == False:
        warn("No Accept-Range header from server, means no explicit support, trying anyway")
    elif res.headers.getheader('Accept-Ranges') == 'none':
        die("Server does not support Accept-Ranges")
    server_values = res.headers.values()
    try:
        file_size = int(server_values[0])
    except ValueError, e:
        die("Server did not return filesize: \"%s\"" %(server_values[0]))
    return file_size

def parse_content_range(content_range):
    [range_type, raw_range] = content_range.split(' ', 1)
    if range_type != 'bytes':
        die("parse_content_range: unsupported range type: \"%s\"" %(range_type))
    [start, rest] = raw_range.split('-', 1)
    [stop, size] = rest.split('/', 1)
    # attention: size could be '*' if size is unknown on server side
    return (start, stop, size)

def get_file_data_from(url, offset):
    req = urllib2.Request(url, headers=headers)
    req.headers['Range'] = 'bytes=%s-' % (offset)
    res = urllib2.urlopen(req)
    return res

file_size = get_file_size(url)
sys.stderr.write('Filesize = %d\n' %(file_size))
pointer = file_size - (1*1024)
first_get = False
if pointer < 0:
    pointer = 0

while True:
    try:
        res = get_file_data_from(url, pointer)
        content_range = res.headers.get('Content-Range')
        (start, stop, size) = parse_content_range(content_range)
        if not first_get:
            [possible_shortened_line, data] = res.read().split("\n", 1)
            first_get = True
        else:
            data = res.read()
        print data,
        pointer = int(stop) + 1
    except urllib2.HTTPError, e:
        if(e.code == 416):   # HTTP Error 416: Requested Range Not Satisfiable
            pass
        else:
            raise
    try:
        time.sleep(1)
    except KeyboardInterrupt, e:
        sys.exit(0)
